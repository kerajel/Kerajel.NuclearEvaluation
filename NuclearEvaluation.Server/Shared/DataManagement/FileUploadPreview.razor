@using NuclearEvaluation.Server.Models.Upload

<h3>Upload your STEM-compatible analysis files for preview</h3>
<h3>This preview tool is highly capable and can handle files with hundreds of thousands of rows</h3>
<p>You can download a populated sample file <a href="URL_PLACEHOLDER">here</a></p>
<p>Or a blank sample file <a href="URL_PLACEHOLDER">here</a></p>

<RadzenCard Variant="Variant.Outlined" style="padding: 1rem;">
    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Multiple Files Upload</RadzenText>
    <InputFile OnChange="OnInputFileChange" Multiple @key="inputFileKey" />

    @if (selectedFiles.Any())
    {
        <RadzenDataGrid Data="@selectedFiles" TItem="UploadedFile" Style="width: 100%; margin-top: 10px;" ColumnWidth="auto">
            <Columns>
                <RadzenDataGridColumn TItem="UploadedFile" Property="BrowserFile.Name" Title="File Name" Width="50%" />
                <RadzenDataGridColumn TItem="UploadedFile" Title="File Size (MB)" Width="100px" TextAlign="TextAlign.Center">
                    <Template Context="file">
                        <span>@((file.BrowserFile.Size / 1048576.0).ToString("F2")) MB</span>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="UploadedFile" Width="100px" TextAlign="TextAlign.Center" Title="Upload Status">
                    <Template Context="file">
                        @if (file.Status == UploadStatus.Uploaded)
                        {
                            <RadzenIcon Icon="check" Color="green" />
                            <span>Uploaded</span>
                        }
                        else if (file.Status == UploadStatus.Uploading)
                        {
                            <span>Uploading</span>
                        }
                        else if (file.Status == UploadStatus.UploadError)
                        {
                            <span>Exceeds file size</span>
                        }
                        else
                        {
                            <span>Not uploaded</span>
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="UploadedFile" Width="100px" TextAlign="TextAlign.Center" Title="Remove">
                    <Template Context="file">
                        <RadzenButton Icon="delete" Click="() => RemoveFile(file)" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }

    @if (selectedFiles.Any() && selectedFiles.Any(f => f.Status == UploadStatus.Pending))
    {
        <RadzenButton Text="Upload Files" Click="ProcessUpload" Style="margin-top: 10px;" />
    }

    @if (progressVisible)
    {
        <RadzenProgressBar Value="@uploadProgress" Style="margin-top: 10px;" />
    }
</RadzenCard>

@code {
    private bool progressVisible = false;
    private int uploadProgress = 0;
    private int inputFileKey = 0;

    // 50 MB limit
    private const long maxAllowedSize = 1024L * 1024L * 50L;

    private List<UploadedFile> selectedFiles = new List<UploadedFile>();

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        List<IBrowserFile> newlySelectedFiles = e.GetMultipleFiles().ToList();

        foreach (IBrowserFile file in newlySelectedFiles)
        {
            // If the file exceeds maxAllowedSize, give it an Error status
            if (file.Size <= maxAllowedSize)
            {
                UploadedFile newFile = new UploadedFile
                    {
                        BrowserFile = file,
                        Status = UploadStatus.Pending,
                    };
                selectedFiles.Add(newFile);
            }
            else
            {
                UploadedFile newFile = new UploadedFile
                    {
                        BrowserFile = file,
                        Status = UploadStatus.UploadError,
                    };
                selectedFiles.Add(newFile);
            }
        }

        await InvokeAsync(StateHasChanged);
        await Task.Yield();
    }

    private async Task ProcessUpload()
    {
        progressVisible = true;
        uploadProgress = 0;

        List<UploadedFile> pendingFiles = selectedFiles
            .Where(f => f.Status == UploadStatus.Pending)
            .ToList();

        foreach (UploadedFile file in pendingFiles)
        {
            file.Status = UploadStatus.Uploading;

            // Simulate upload
            await Task.Delay(500);

            file.Status = UploadStatus.Uploaded;
            uploadProgress += 100 / pendingFiles.Count;

            await InvokeAsync(StateHasChanged);
            await Task.Yield();
        }

        progressVisible = false;
        await InvokeAsync(StateHasChanged);
        await Task.Yield();
    }

    private async Task RemoveFile(UploadedFile file)
    {
        selectedFiles.Remove(file);
        selectedFiles = selectedFiles.ToList();

        await InvokeAsync(StateHasChanged);
        await Task.Yield();
    }
}
