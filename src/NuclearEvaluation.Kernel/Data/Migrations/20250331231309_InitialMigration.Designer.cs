// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NuclearEvaluation.Kernel.Data.Context;

#nullable disable

namespace NuclearEvaluation.Kernel.Data.Migrations
{
    [DbContext(typeof(NuclearEvaluationServerDbContext))]
    [Migration("20250331231309_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "ADMIN");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "ADMIN");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "ADMIN");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "ADMIN");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "ADMIN");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.DataManagement.PMI.PmiReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("PmiReport", "EVALUATION");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.DataManagement.PMI.PmiReportDistributionEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DistributionChannel")
                        .HasColumnType("int");

                    b.Property<int>("DistributionStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("PmiReportId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PmiReportId");

                    b.ToTable("PmiReportDistributionEntry", "EVALUATION");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Domain.Apm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<decimal?>("ErU234")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.Property<decimal?>("ErU235")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.Property<decimal?>("ErU236")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.Property<decimal?>("ErU238")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.Property<int>("SubSampleId")
                        .HasColumnType("int");

                    b.Property<decimal?>("U234")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.Property<decimal?>("U235")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.Property<decimal?>("U236")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.Property<decimal?>("U238")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.HasKey("Id");

                    b.HasIndex("SubSampleId");

                    b.ToTable("Apm", "DATA");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Domain.Particle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AnalysisDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<decimal?>("ErU234")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.Property<decimal?>("ErU235")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.Property<bool>("IsNu")
                        .HasColumnType("bit");

                    b.Property<string>("LaboratoryCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<decimal>("ParticleExternalId")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("SubSampleId")
                        .HasColumnType("int");

                    b.Property<decimal?>("U234")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.Property<decimal?>("U235")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.HasKey("Id");

                    b.HasIndex("SubSampleId");

                    b.ToTable("Particle", "DATA");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Domain.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Conclusions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DecayCorrectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FollowUpActionsRecommended")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Project", "EVALUATION");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Domain.ProjectSeries", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId", "SeriesId");

                    b.HasIndex("SeriesId");

                    b.ToTable("ProjectSeries", "EVALUATION");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Domain.Sample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExternalCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<decimal?>("Latitude")
                        .HasPrecision(11, 8)
                        .HasColumnType("decimal(11,8)");

                    b.Property<decimal?>("Longitude")
                        .HasPrecision(11, 8)
                        .HasColumnType("decimal(11,8)");

                    b.Property<string>("SampleClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("SampleType")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tinyint")
                        .HasComputedColumnSql("CASE WHEN SampleClass LIKE 'PIC%' THEN 3 WHEN SampleClass LIKE '%QC%' THEN 4 ELSE 2 END");

                    b.Property<DateTime>("SamplingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeriesId");

                    b.ToTable("Sample", "DATA");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Domain.Series", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 10000L);

                    b.Property<DateTime?>("AnalysisCompleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDu")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNu")
                        .HasColumnType("bit");

                    b.Property<int>("SeriesType")
                        .HasColumnType("int");

                    b.Property<string>("SgasComment")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("WorkingPaperLink")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Series", "DATA");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Domain.SubSample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActivityNotes")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("ExternalCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<bool>("IsFromLegacySystem")
                        .HasColumnType("bit");

                    b.Property<int>("SampleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScreeningDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime?>("UploadResultDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SampleId");

                    b.ToTable("SubSample", "DATA");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Filters.PresetFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("PresetFilter", "EVALUATION");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Filters.PresetFilterEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("LogicalFilterOperator")
                        .HasColumnType("int");

                    b.Property<int>("PresetFilterEntryType")
                        .HasColumnType("int");

                    b.Property<int>("PresetFilterId")
                        .HasColumnType("int");

                    b.Property<string>("SerializedDescriptors")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PresetFilterId");

                    b.ToTable("PresetFilterEntry", "EVALUATION");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "ADMIN");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "ADMIN");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Views.ApmView", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<decimal?>("ErU234")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.Property<decimal?>("ErU235")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.Property<decimal?>("ErU236")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.Property<decimal?>("ErU238")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.Property<int>("SubSampleId")
                        .HasColumnType("int");

                    b.Property<decimal?>("U234")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.Property<decimal?>("U235")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.Property<decimal?>("U236")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.Property<decimal?>("U238")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.HasKey("Id");

                    b.HasIndex("SubSampleId");

                    b.ToTable((string)null);

                    b.ToView("ApmView", "DATA");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Views.ParticleView", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("AnalysisDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<decimal?>("ErU234")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.Property<decimal?>("ErU235")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.Property<bool>("IsNu")
                        .HasColumnType("bit");

                    b.Property<string>("LaboratoryCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<decimal>("ParticleExternalId")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("SubSampleId")
                        .HasColumnType("int");

                    b.Property<decimal?>("U234")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.Property<decimal?>("U235")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.HasKey("Id");

                    b.HasIndex("SubSampleId");

                    b.ToTable((string)null);

                    b.ToView("ParticleView", "DATA");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Views.ProjectDecayCorrectedApmView", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<decimal?>("ErU234")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.Property<decimal?>("ErU235")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.Property<decimal?>("ErU236")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.Property<decimal?>("ErU238")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SubSampleId")
                        .HasColumnType("int");

                    b.Property<decimal?>("U234")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.Property<decimal?>("U235")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.Property<decimal?>("U236")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.Property<decimal?>("U238")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.HasKey("Id");

                    b.HasIndex("SubSampleId");

                    b.ToTable((string)null);

                    b.ToView("ProjectDecayCorrectedApmView", "EVALUATION");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Views.ProjectDecayCorrectedParticleView", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("AnalysisDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<decimal?>("ErU234")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.Property<decimal?>("ErU235")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.Property<bool>("IsNu")
                        .HasColumnType("bit");

                    b.Property<string>("LaboratoryCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<decimal>("ParticleExternalId")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("SubSampleId")
                        .HasColumnType("int");

                    b.Property<decimal?>("U234")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.Property<decimal?>("U235")
                        .HasPrecision(38, 15)
                        .HasColumnType("decimal(38,15)");

                    b.HasKey("Id");

                    b.HasIndex("SubSampleId");

                    b.ToTable((string)null);

                    b.ToView("ProjectDecayCorrectedParticleView", "EVALUATION");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Views.ProjectView", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Conclusions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DecayCorrectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FollowUpActionsRecommended")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SampleCount")
                        .HasColumnType("int");

                    b.Property<string>("SeriesIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.ToView("ProjectView", "EVALUATION");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Views.ProjectViewSeriesView", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("SeriesId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("ProjectId", "SeriesId");

                    b.HasIndex("SeriesId");

                    b.ToTable((string)null);

                    b.ToView("ProjectViewSeriesView", "EVALUATION");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Views.SampleView", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ExternalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Latitude")
                        .HasPrecision(11, 8)
                        .HasColumnType("decimal(11,8)");

                    b.Property<decimal?>("Longitude")
                        .HasPrecision(11, 8)
                        .HasColumnType("decimal(11,8)");

                    b.Property<string>("SampleClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SampleType")
                        .HasColumnType("int");

                    b.Property<DateTime>("SamplingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Sequence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.Property<int>("SubSampleCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeriesId");

                    b.ToTable((string)null);

                    b.ToView("SampleView", "DATA");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Views.SeriesView", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AnalysisCompleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDu")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNu")
                        .HasColumnType("bit");

                    b.Property<int>("SampleCount")
                        .HasColumnType("int");

                    b.Property<string>("SampleExternalCodes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeriesType")
                        .HasColumnType("int");

                    b.Property<string>("SgasComment")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("WorkingPaperLink")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.ToView("SeriesView", "DATA");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Views.SubSampleView", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ActivityNotes")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("ExternalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFromLegacySystem")
                        .HasColumnType("bit");

                    b.Property<int>("SampleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScreeningDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Sequence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime?>("UploadResultDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SampleId");

                    b.ToTable((string)null);

                    b.ToView("SubSampleView", "DATA");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("NuclearEvaluation.Kernel.Models.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NuclearEvaluation.Kernel.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NuclearEvaluation.Kernel.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("NuclearEvaluation.Kernel.Models.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NuclearEvaluation.Kernel.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NuclearEvaluation.Kernel.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.DataManagement.PMI.PmiReport", b =>
                {
                    b.HasOne("NuclearEvaluation.Kernel.Models.Identity.ApplicationUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.DataManagement.PMI.PmiReportDistributionEntry", b =>
                {
                    b.HasOne("NuclearEvaluation.Kernel.Models.DataManagement.PMI.PmiReport", "PmiReport")
                        .WithMany("PmiReportDistributionEntries")
                        .HasForeignKey("PmiReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PmiReport");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Domain.Apm", b =>
                {
                    b.HasOne("NuclearEvaluation.Kernel.Models.Domain.SubSample", "SubSample")
                        .WithMany("Apms")
                        .HasForeignKey("SubSampleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SubSample");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Domain.Particle", b =>
                {
                    b.HasOne("NuclearEvaluation.Kernel.Models.Domain.SubSample", "SubSample")
                        .WithMany("Particles")
                        .HasForeignKey("SubSampleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SubSample");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Domain.ProjectSeries", b =>
                {
                    b.HasOne("NuclearEvaluation.Kernel.Models.Domain.Project", "Project")
                        .WithMany("ProjectSeries")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NuclearEvaluation.Kernel.Models.Domain.Series", "Series")
                        .WithMany("ProjectSeries")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Domain.Sample", b =>
                {
                    b.HasOne("NuclearEvaluation.Kernel.Models.Domain.Series", "Series")
                        .WithMany("Samples")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Series");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Domain.SubSample", b =>
                {
                    b.HasOne("NuclearEvaluation.Kernel.Models.Domain.Sample", "Sample")
                        .WithMany("SubSamples")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sample");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Filters.PresetFilterEntry", b =>
                {
                    b.HasOne("NuclearEvaluation.Kernel.Models.Filters.PresetFilter", "PresetFilter")
                        .WithMany("Entries")
                        .HasForeignKey("PresetFilterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PresetFilter");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Views.ApmView", b =>
                {
                    b.HasOne("NuclearEvaluation.Kernel.Models.Views.SubSampleView", "SubSample")
                        .WithMany("Apms")
                        .HasForeignKey("SubSampleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SubSample");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Views.ParticleView", b =>
                {
                    b.HasOne("NuclearEvaluation.Kernel.Models.Views.SubSampleView", "SubSample")
                        .WithMany("Particles")
                        .HasForeignKey("SubSampleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SubSample");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Views.ProjectDecayCorrectedApmView", b =>
                {
                    b.HasOne("NuclearEvaluation.Kernel.Models.Views.SubSampleView", "SubSample")
                        .WithMany()
                        .HasForeignKey("SubSampleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SubSample");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Views.ProjectDecayCorrectedParticleView", b =>
                {
                    b.HasOne("NuclearEvaluation.Kernel.Models.Views.SubSampleView", "SubSample")
                        .WithMany()
                        .HasForeignKey("SubSampleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SubSample");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Views.ProjectViewSeriesView", b =>
                {
                    b.HasOne("NuclearEvaluation.Kernel.Models.Views.ProjectView", "Project")
                        .WithMany("ProjectSeries")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NuclearEvaluation.Kernel.Models.Views.SeriesView", "Series")
                        .WithMany("ProjectSeries")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Views.SampleView", b =>
                {
                    b.HasOne("NuclearEvaluation.Kernel.Models.Views.SeriesView", "Series")
                        .WithMany("Samples")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Series");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Views.SubSampleView", b =>
                {
                    b.HasOne("NuclearEvaluation.Kernel.Models.Views.SampleView", "Sample")
                        .WithMany("SubSamples")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sample");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.DataManagement.PMI.PmiReport", b =>
                {
                    b.Navigation("PmiReportDistributionEntries");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Domain.Project", b =>
                {
                    b.Navigation("ProjectSeries");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Domain.Sample", b =>
                {
                    b.Navigation("SubSamples");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Domain.Series", b =>
                {
                    b.Navigation("ProjectSeries");

                    b.Navigation("Samples");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Domain.SubSample", b =>
                {
                    b.Navigation("Apms");

                    b.Navigation("Particles");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Filters.PresetFilter", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Views.ProjectView", b =>
                {
                    b.Navigation("ProjectSeries");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Views.SampleView", b =>
                {
                    b.Navigation("SubSamples");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Views.SeriesView", b =>
                {
                    b.Navigation("ProjectSeries");

                    b.Navigation("Samples");
                });

            modelBuilder.Entity("NuclearEvaluation.Kernel.Models.Views.SubSampleView", b =>
                {
                    b.Navigation("Apms");

                    b.Navigation("Particles");
                });
#pragma warning restore 612, 618
        }
    }
}
